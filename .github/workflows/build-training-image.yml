name: Build and Push nanochat Training Image

on:
  push:
    branches:
      - master
    paths:
      - 'ionet-caas/**'
      - '.github/workflows/build-training-image.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'ionet-caas/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'

env:
  IMAGE_NAME: nanochat-training

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Docker tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.tag.outputs.tag }}
            type=sha,prefix={{branch}}-
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ionet-caas
          file: ./ionet-caas/Dockerfile.training
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Image Built Successfully! 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Use this image in your CaaS deployment:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '{' >> $GITHUB_STEP_SUMMARY
          echo '  "registry_config": {' >> $GITHUB_STEP_SUMMARY
          echo '    "image_url": "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}",' >> $GITHUB_STEP_SUMMARY
          echo '    "registry_username": "${{ secrets.DOCKERHUB_USERNAME }}",' >> $GITHUB_STEP_SUMMARY
          echo '    "registry_secret": "YOUR_DOCKERHUB_TOKEN"' >> $GITHUB_STEP_SUMMARY
          echo '  }' >> $GITHUB_STEP_SUMMARY
          echo '}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
